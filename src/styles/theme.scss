//当html的data-theme为dark时，样式引用dark
//data-theme为其他值时，就采用组件库的默认样式
//这里我只定义了两套主题方案，想要再多只需在`$themes`里加就行了
//注意一点是，每套配色方案里的key可以自定义但必须一致，不然就会混乱
/* 使用scss变量来制作切换主题颜色，兼容性好相比css变量较臃肿 */
// 定义mapkey不能使用$开头，那是变量声明
@import './scss/mixins';
$default: (
  main-color: $main-color,
  nav-color: rgba($color: #314254, $alpha: 0.72),
  box-shadow: $box-shadow,
  main-bgc: #eeeeee,
  minor-bgc: #ffffff,
  text-color: #364f6b,
  text-color2: rgba($color: #364f6b, $alpha: 0.65),
  hover-color: #f9f9f9
  // #364f6b #3fc1c9 #f5f5f5 #fc5185
);
$dark: (
  // #222831 #393e46  #00adb5  #eeeeee
  main-color: $main-color,
  nav-color: #314254,
  box-shadow: $box-shadow,
  main-bgc: #222831,
  minor-bgc: #393e46,
  text-color: rgba($color: #fff, $alpha: 0.85),
  text-color2: rgba($color: #fff, $alpha: 0.65),
  hover-color: rgba(255, 255, 255, 0.08)
);
$themes: (
  // theme-default: $default,
  theme-light: $default,
  theme-dark: $dark,
);


//遍历主题map
@mixin themeify {
  @each $theme-name, $theme-map in $themes {
    //!global 把局部变量强升为全局变量
    $theme-map: $theme-map !global;
    //判断html的data-theme的属性值  #{}是sass的插值表达式
    //& sass嵌套里的父容器标识   @content是混合器插槽，像vue的slot
    body[data-theme='#{$theme-name}'] & {
      @content;
    }
  }
}
// 直接插入属性和属性值，返回属性和属性值
@mixin styles($style, $type) {
  @include themeify {
    #{$style}: isStyle($type);
  }
}
@mixin main-color($style) {
  @include themeify {
    #{$style}: isStyle('main-color');
  }
}
//返回属性值
@function themed($key) {
  @return map-get($theme-map, $key);
  // 判断是否存在key
  // @return map-has-key($theme-map, $key);
}

//获取主颜色
@function main-color() {
  @return themed('main-color');
}

//获取对应主题对应属性下相关状态的属性值
@function isStyle($type) {
  //map-get 根据对应的key值返回map中对应的值
  //map-get($map, $key)
  @if map-has-key($theme-map, $type) {
    @return map-get($theme-map, $type);
  }
}
